`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: California State Polytechnic University Pomona
// Engineer: Undergraduate Brandon Rickman
// 
// Create Date: 06/21/2024 01:05:57 PM
// Design Name: Lab2
// Module Name: mux4x1
// Project Name: 4MUX_RGB_Control
// Target Devices: 
// Tool Versions: 
// Description: Combination of 2x1 Multiplexers to create 4x1 Multiplexer
// 
// Dependencies: 
// 
// Revision: 1.0
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module mux4x1(
                input [1:0] sel,    //Select options 0 and 1
                input [3:0] mux4x1_ip,  //Four inputs to the MUX
                output mux4x1_op    //MUX output
             );
         
         wire [1:0] mux4x1_temp;    //Temporary wire exiting the MUX
             
         mux2x1  MUX0  (
                        .sel(sel[0]),   //Select option 0
                        .mux2x1_ip(mux4x1_ip[1:0]), //Inputs 0 and 1 to MUX
                        .mux2x1_op(mux4x1_temp[0])  //Temporary output from MUX0
                      );
         mux2x1  MUX1  (
                        .sel(sel[0]),   //Select option 0
                        .mux2x1_ip(mux4x1_ip[3:2]), //Inputs 2 and 3 to MUX
                        .mux2x1_op(mux4x1_temp[1])  //Temporary output from MUX1
                      );
         mux2x1  MUX2  (
                        .sel(sel[1]),   //Select option 1
                        .mux2x1_ip(mux4x1_temp[1:0]),   //Inputs to MUX2 are the outputs from MUX0 and MUX1
                        .mux2x1_op(mux4x1_op)   //Mux4x1 final output
                      );
                      
endmodule
