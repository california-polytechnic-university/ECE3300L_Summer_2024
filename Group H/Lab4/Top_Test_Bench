`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: California State Polytechnic University
// Engineer: Undergrad. Brandon Rickman
// 
// Create Date: 07/14/2024 02:06:21 PM
// Design Name: 
// Module Name: Top_tb
// Project Name: Lab4 BCD/HEX UP/DOWN Counter 
// Target Devices: 
// Tool Versions: 
// Description: Test bench for testing each case of clock divider, and conditions for BCD/HEX UP/DOWN displaying
// 
// Dependencies: 
// 
// Revision: 1.4
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////



module top_tb;

    reg clk;    //Clock register
    reg reset_n;    //Reset register
    reg [4:0] s;    //Clock divider switches register
    reg up_down;    //Up/Down register
    reg bcd_sel;    //BCD/HEX register
    wire [6:0] sseg;    //Segments on seven segment display
    wire [7:0] AN;  //Active displays
    wire [3:0] Q0, Q1, Q2, Q3; // To monitor the counter values

    // Instantiate the Unit Under Test (UUT)
    top #(32) uut (
        .clk(clk),
        .reset_n(reset_n),
        .up_down(up_down),
        .bcd_sel(bcd_sel),
        .SW(s),
        .sseg(sseg),
        .AN(AN)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk;  // 100 MHz clock
    end

    // Test sequence
    initial begin
        // Initialize Inputs
        reset_n = 0;    //Reset low
        s = 5'b00010; // Set clock divider to a middle value
        up_down = 1;    //UP Count 
        bcd_sel = 1;    //Count in BCD

        // Deassert reset after a short delay
        #10 reset_n = 1;    //Reset high
        #10 reset_n = 0;    //Reset low

        // Clock divider switch settings ---switches low are better for simulation, more switches high are better for board---
        #50 s = 5'b00000; //System clock speed for simulation 
        #50 s = 5'b00100;
        #50 s = 5'b01000;
        #50 s = 5'b10000;


        // Test up counting in BCD
        up_down = 1; bcd_sel = 1;
        #1000 ;


        // Test down counting in BCD
        up_down = 0; bcd_sel = 1;
        #1000;


        // Test up counting in HEX
        up_down = 1; bcd_sel = 0;
        #1000;

        // Test down counting in HEX
        up_down = 0; bcd_sel = 0;
        #1000;

        // End simulation
        $stop;
    end

    // Monitor the counter values
    assign Q0 = uut.C0.Q;
    assign Q1 = uut.C1.Q;
    assign Q2 = uut.C2.Q;
    assign Q3 = uut.C3.Q;
endmodule
